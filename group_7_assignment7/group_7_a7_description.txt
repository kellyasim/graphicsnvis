PROJECT DESCRIPTION 

We have decide to do a "hoard mode" style game. The goal of the game is to defeat the turtles. 

GAMEPLAY: 
Rules:
1) Touching an Enemy takes away health.
2) you can attack the Enemy.
3) you can only move within the confines of the map.
4) being within a certain distance from an enemy will draw the enemy's attention
5) when an entity is hit they experience recoil, a sudden movement away from the source of the damage.


Interactions:
1) 'w' to move up 
2) 'a' to move left 
3) 'd' to move right
4) 's' to move down
5) 'j' to attack
6) 'p' to pause
7) 'r' to restart the game

Visual display:
> the purple circle represents the player (a seajelly)
> the enemies are sea turtles
> the player's attack is a bolt of electricity

GUI Interface (HUD):
> player health points and lives
> number of enemies left 
> what level the player is on

Win:
Player needs to defeat all opponents on the screen to move on to the next level.
The player wins after defeating all the enemies on level 3.

Lose:
Player runs out of hp and lives.


Classes:
> MapElement class loads in each new level- expandable for future uses and controls the directional turtle.pngs, number of enemies and their movements

> EntityObject class loads in sprite objects (both enemies and the player self) into the map. It loads in the position of all sprite objects to account for collisions as well as the health/lives of each sprite.

Extended from this class are:
* Enemy (turtles)
* PlayerObject (jellyfish)
In the Enemy class stores the health, size and speed of each turtle and in the PlayerObject class, are the player controls (WASD), player lives and the attack move and animations and the 'Game Over' state.

> HUD class (Heads up display) stores all the information for health, lives and number of turtles left to defeat.

The main class calls the HUD and MapElement classes directly. The HUD class calls directly on the PlayerObject class to load in player health information while the MapElement class loads from each of the other classes to create the overall GUI.

Struggles:
Had issues with the smoothness of the game and only being able to turn at right angles this causes some issues with the attack move being slightly off centered and the general mechanics of the game. Additionally there is still a bug that exists where the turtles can push the player off the screen. The player can recover from this if they move toward the screen, but it might be easier to reset the game.

Overview:
Abel did quite literally all of the coding and setting up all the classes with some (barely) input from Kelly. 

Kelly worked on finding graphics (background), animation of the turtle and attack move and the tutorial screen.

Bongani worked on writing up the progress report and softcoding the structure of classes and animation artifcate.
